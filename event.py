class Event:
    '''
    Interface for all subsequent (inherited) events, that will trigger further events in the 
    trading infrastructure
    '''
    pass


class MarketEvent(Event):
    '''
    Handles the evnt of receiving new market update w/ corresponding bars

    Triggers Strategy object generating new trading signals; triggered when outer while loop 
    starts new 'heartbeat'
    '''

    def __init__(self):
        '''
        Init MarketEvent
        '''
        self.type = "MARKET"


class SignalEvent(Event):
    '''
    Handles the event of sending a Signal from a Strategy obj.
    Received by a Portfolio obj. and acted upon.

    Strategy obj. uses market data to create SignalEvents
    '''

    def __init__(self, strategy_id, symbol, datetime,
                 signal_type, strength):
        '''
        Init SignalEvent

        Parameters:
        strategy_id - unique identified for strategy that generated signal
        symbol - ticker symbol
        datetime - 'LONG' or 'SHORT'
        signal_type - Adjustment factor 'suggestion' used to scale quantity at the portfolio level. Useful for pairs strategies
        '''
        self.type = 'SIGNAL'
        self.strategy_id = strategy_id
        self.symbol = symbol
        self.datetime = datetime
        self.signal_type = signal_type
        self.strength = strength



class OrderEvent(Event):
    '''
    Handle the event of sending an Order to an execution system.
    The order contains a symbol, a type (market / limit), quantity, and a direction

    Sent to an ExecutionHandler
    '''
    
    def __init__(self, symbol, order_type, quantity, direction):
        '''
        Initializes the order type, setting whether it is
        a Market order 'MKT' / Limit order 'LMT', quantity (integral)
        and direction ('BUY' / 'SELL')

        Parameters:
        symbol - instrument to trade
        order_type - 'MKT' or 'LMT' for Market or Limit
        quantity - Non-negative integer for quantity
        direction - 'BUY' / 'SELL' for long or short
        '''

        self.type = 'ORDER'
        self.symbol = symbol
        self.order_type = order_type
        self.quantity = quantity
        self.direction = direction

    
    def print_order(self):
        '''
        Output values w/in Order
        '''
        print(
            f"Order: Symbol={self.symbol}, Type={self.type}, 
            Quantity={self.quantity}, Direction={self.direction}"
        )


class FillEvent(Event):
    '''
    Encapsulates the notion of a Filled Order, as returned
    from a brokerage. Stores the quantity of an instrument
    actually filled and at what price. Also stores
    the commission of the trade from the brokerage

    Generated by ExecutionHandler after transacting order
    '''
    def __init__(self, timeidx, symbol, exchange, quantity,
                 direction, fill_cost, commission=None):
        '''
        Init FillEvent. Sets symbol, exchange, quantity,
        direction, cost of fill and an optional commission

        If commission is not provided, the Fill object will calculate 
        it based on the trade size and Interactive Brokers fees

        Parameters:
        timeidx - bar-resolution when the order was filled
        symbol - instrument which was filled
        exchange - exchange where the order was filled
        quantity - filled quantity
        direction - direction of fill ('BUY' / 'SELL')
        fill_cost - holdings value in dollars
        commission - optional commission sent from IB
        '''

        self.type = 'FILL'
        self.timeidx = timeidx
        self.symbol = symbol
        self.exchange = exchange
        self.quantity = quantity
        self.direction = direction
        self.fill_cost = fill_cost

        # calculate commission
        if commission is None:
            self.commission = self.calculated_commission()
        else:
            self.commission = commission


    def calculated_commission(self):
        '''
        Calculates the fees of trading based on an
        Interactive Brokers fee structure for API (in USD; based on 'US API Directed Orders')

        Doesn't include exchange or ECN fees
        '''
        full_cost = 1.3
        if self.quantity <= 500:
            full_cost = max(full_cost, .013 * self.quantity)
        else:
            full_cost = max(full_cost, .008 * self.quantity)
        return full_cost